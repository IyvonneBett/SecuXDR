/*
 * Wazuh Module to analyze system vulnerabilities
 * Copyright (C) 2015, Wazuh Inc.
 * January 4, 2018.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef WM_VUNALIZER_DB
#define WM_VUNALIZER_DB

#define CVE_DBS_PATH            "queue/vulnerabilities/"
#define CVE_DB CVE_DBS_PATH     "cve.db"

#define AGENTS_TABLE            "AGENTS"
#define CVE_TABLE               "VULNERABILITIES"
#define CVE_INFO_TABLE          "VULNERABILITIES_INFO"
#define CVE_REF_TABLE           "REFERENCES_INFO"
#define CVE_BUG_REF_TABLE       "BUGZILLA_REFERENCES_INFO"
#define CVE_ADVISORY_TABLE      "ADVISORIES_INFO"
#define INFO_STATE_TABLE        "INFO_STATE"
#define METADATA_TABLE          "METADATA"
#define CPEH_SOURCE_TABLE       "CPE_HELPER_SOURCE"
#define CPET_TRANSL_TABLE       "CPE_HELPER_TRANSLATION"
#define CPE_HELPER_TABLE        "CPE_HELPER"
#define VARIABLES_TABLE         "VARIABLES"
#define ARCHITECTURES_TABLE     "ARCHITECTURES"
#define PKG_DEPS_TABLE          "PKG_DEPS"
#define DEPENDENCIES_TABLE      "DEPENDENCIES"
#define MAX_QUERY_SIZE          OS_SIZE_1024
#define MAX_SQL_ATTEMPTS        1000
#define SQL_BUSY_SLEEP_MS       1
#define VU_MAX_PACK_REQ         20

typedef enum vu_query {
    DELETE_QUERY,
    VU_CHECK_DB_CONTENT,
    TIMESTAMP_QUERY,
    HASH_QUERY,
    VU_INSERT_CVE,
    VU_INSERT_CVE_INFO,
    VU_INSERT_REF_INFO,
    VU_INSERT_BUG_REF_INFO,
    VU_INSERT_ADVISORY_INFO,
    VU_INSERT_METADATA,
    VU_GET_LAST_UPDATE,
    VU_INSERT_AGENTS,
    VU_INSERT_AGENT_HOTFIXES,
    VU_INSERT_VARIABLES,
    VU_INSERT_PKG_DEPS,
    VU_INSERT_DEPENDENCIES,
    VU_AGENT_PACKAGE_VERSION,
    VU_UPDATE_CVE,
    VU_UPDATE_CVE_NOT_FIXED,
    VU_UPDATE_CVE_VAL,
    VU_UPDATE_ARCH,
    VU_UPDATE_CVE_PACK,
    VU_UPDATE_DEPS_FLAG,
    VU_UPDATE_RESET_DEPS_FLAG,
    VU_REMOVE_UNUSED_ID,
    VU_GET_MULTIPLE_CVE_ENTRIES,
    VU_GET_MULTIPLE_CVE_ENTRIES_UBUNTU,
    VU_JOIN_QUERY,
    VU_JOIN_RH_QUERY,
    VU_JOIN_DEBIAN_QUERY,
    VU_JOIN_ARCH_QUERY,
    VU_JOIN_SUSE_QUERY,
    VU_GET_SUSE_DEPS,
    VU_GET_VULN_COUNT,
    VU_GET_VULN_INFO,
    VU_REFS_QUERY,
    VU_BUG_REFS_QUERY,
    VU_ADVISORY_QUERY,
    VU_REMOVE_OS,
    VU_REMOVE_AGENTS_TABLE,
    VU_REMOVE_HOTFIXES_TABLE,
    VU_REMOVE_UNUSED_VULS,
    VU_REMOVE_UNUSED_STATES,
    // WAZUH DB REQUESTS
    VU_HOTFIXES_GET,
    VU_PACKAGES_GET,
    VU_SYSC_UPDATE_CPE,
    VU_SYSC_CLEAN_CPES,
    VU_GET_LAST_SCAN,
    VU_SET_LAST_FULL_SCAN,
    VU_SET_LAST_PARTIAL_SCAN,
    // CPE INDEX
    VU_INSERT_CPE,
    VU_REMOVE_AGENT_CPE,
    VU_SEARCH_AGENT_CPE,
    VU_MIN_CPEINDEX,
    VU_GET_PACK_WITHOUT_CPE,
    VU_GET_AGENT_CPES,
    VU_UPDATE_AGENT_CPE,
    // NVD
    VU_GET_NVD_COUNT,
    VU_GET_NVD_CONFIGURED_YEAR,
    VU_GET_NVD_TIMESTAMP,
    VU_REP_NVD_METADATA,
    VU_INSERT_NVD_CVE,
    VU_GET_MAX_NVD_CVE_ID,
    VU_INSERT_NVD_METRIC_CVSS,
    VU_INSERT_NVD_REFERENCE,
    VU_INSERT_NVD_CVE_CONFIGURATION,
    VU_GET_MAX_CONFIGURATION_ID,
    VU_INSERT_NVD_CVE_MATCHES,
    VU_INSERT_NVD_CPE,
    VU_GET_AN_CPE_ID,
    VU_GET_MAX_NVD_CPE_ID,
    VU_GET_OFFLINE_UPDATE,
    VU_GET_NVD_LAST_UPDATE,
    // NVD CLEAN
    VU_REMOVE_NVD_METADATA,
    VU_GET_NVD_CVE_YEAR,
    VU_REMOVE_CVE_TABLE_REFS,
    VU_REMOVE_CVE_MATCHES,
    VU_REMOVE_NVD_CPE,
    VU_REMOVE_NVD_CVE,
    VU_GET_NVD_CONFIG,
    // NVD REPORT
    VU_GET_CVE_INFO,
    VU_GET_CVE_INFO_FILTER_CVE,
    VU_GET_CVE,
    VU_GET_REFERENCE,
    VU_GET_SCORING,
    // NVD VULNERABILITY CHECK
    VU_GET_DICT_CPE,
    VU_GET_NVD_CPE,
    VU_GET_NVD_MATCHES,
    VU_GET_CONF,
    VU_GET_CONF_AND,
    VU_GET_MATCHES_AND,
    VU_GET_CPE_AND,
    VU_GET_AGENTCPE_AND,
    VU_GET_GENERIC_PACKAGE_APP,
    VU_GET_GENERIC_PACKAGE_OS,
    VU_GET_SPECIFIC_PACKAGE_APP,
    VU_GET_SPECIFIC_PACKAGE_OS,
    VU_GET_CHILDREN,
    VU_GET_SIBLINGS,
    VU_GET_NVD_CVE_COUNT,
    VU_GET_NVD_MATCHES_COUNT,
    VU_GET_GENERIC_PACKAGE_OS_MAC,
    VU_GET_SPECIFIC_PACKAGE_OS_MAC,
    VU_GET_GENERIC_PACKAGE_APP_MAC,
    VU_GET_SPECIFIC_PACKAGE_APP_MAC,
    // SQL OPERATIONS
    VU_REMOVE_SQUENCE,
    // WAZUH CPE DICTIONARY
    VU_REMOVE_CPE_DIC,
    VU_INSERT_CPE_HELPER,
    VU_INSERT_CPE_SOURCE,
    VU_INSERT_CPE_TRANSLATION,
    VU_GET_DIC_MATCHES,
    VU_GET_EXACT_TERM,
    VU_GET_TRANSLATION_TERM,
    // MSU
    VU_REMOVE_MSU,
    VU_REMOVE_MSU_SUP,
    VU_INSERT_MSU,
    VU_INSERT_MSU_SUPER,
    VU_SIZE_MSU,
    VU_HOTFX_SIMPLE,
    VU_HOTFX_WITHOUT_R2,
    VU_CHECK_AGENT_HOTFIX,
    //ARCHITECTURES
    VU_GET_ARCH_ID,
    // TRANSACTIONS
    BEGIN_T,
    END_T
} vu_query;

static const char *vu_queries[] = {
    [DELETE_QUERY] = "DELETE FROM %s;",
    [VU_CHECK_DB_CONTENT] = "SELECT COUNT(*) FROM VULNERABILITIES WHERE TARGET = ?;",
    [TIMESTAMP_QUERY] = "SELECT TIMESTAMP FROM " METADATA_TABLE " WHERE TARGET = ?;",
    [HASH_QUERY] = "SELECT SHA256 FROM " METADATA_TABLE " WHERE TARGET = ?;",
    [VU_INSERT_CVE] = "INSERT OR IGNORE INTO " CVE_TABLE " VALUES(?,?,?,?,?,?,?,?,?,?);",
    [VU_INSERT_CVE_INFO] = "INSERT INTO " CVE_INFO_TABLE " VALUES(?,?,?,?,?,?,?,?,?,?,?,?);",
    [VU_INSERT_REF_INFO] = "INSERT INTO " CVE_REF_TABLE " VALUES(?,?,?);",
    [VU_INSERT_BUG_REF_INFO] = "INSERT INTO " CVE_BUG_REF_TABLE " VALUES(?,?,?);",
    [VU_INSERT_ADVISORY_INFO] = "INSERT INTO " CVE_ADVISORY_TABLE " VALUES(?,?,?);",
    [VU_INSERT_METADATA] = "INSERT OR REPLACE INTO " METADATA_TABLE " VALUES(?,?,?,?,?,?,?,?,strftime('%s', 'now'));",
    [VU_GET_LAST_UPDATE] = "SELECT LAST_UPDATE FROM " METADATA_TABLE " WHERE TARGET = ?;",
    [VU_INSERT_AGENTS] = "INSERT INTO " AGENTS_TABLE " VALUES(?,?,?,?,?,?,?,?,?,?,?,?);",
    [VU_INSERT_AGENT_HOTFIXES] = "INSERT INTO AGENT_HOTFIXES VALUES(?,?);",
    [VU_INSERT_VARIABLES] = "INSERT INTO " VARIABLES_TABLE " VALUES(?,?,?);",
    [VU_INSERT_PKG_DEPS] = "INSERT INTO " PKG_DEPS_TABLE " VALUES(?,?,?);",
    [VU_INSERT_DEPENDENCIES] = "INSERT INTO " DEPENDENCIES_TABLE " VALUES(?,?,?,?,?,0);",
    [VU_AGENT_PACKAGE_VERSION] = "SELECT SOURCE, PACKAGE_NAME, VERSION, SRC_VERSION, ARCH, VENDOR, REFERENCE, TYPE FROM AGENTS WHERE AGENT_ID = ?;",
    [VU_UPDATE_CVE] = "UPDATE " CVE_TABLE " SET PACKAGE = ?, OPERATION = ? WHERE OPERATION = ?;",
    [VU_UPDATE_CVE_NOT_FIXED] = "UPDATE " CVE_TABLE " SET PACKAGE = ?, OPERATION = ?, OPERATION_VALUE = ? WHERE OPERATION = ?;",
    [VU_UPDATE_CVE_VAL] = "UPDATE " CVE_TABLE " SET OPERATION = ?, OPERATION_VALUE = ?, ARCH_ID = ? WHERE OPERATION = ?;",
    [VU_UPDATE_ARCH] = "INSERT OR IGNORE INTO " ARCHITECTURES_TABLE " VALUES(?,?,?);",
    [VU_UPDATE_CVE_PACK] = "UPDATE " CVE_TABLE " SET PACKAGE = ?, CHECK_VARS = ? WHERE PACKAGE = ?;",
    [VU_UPDATE_DEPS_FLAG] = "UPDATE DEPENDENCIES SET INSTALLED = 1 WHERE NAME = ? AND TARGET = ? AND OPERATION_VALUE = ?;",
    [VU_UPDATE_RESET_DEPS_FLAG] = "UPDATE DEPENDENCIES SET INSTALLED = 0 WHERE INSTALLED = 1;",
    [VU_REMOVE_UNUSED_ID] = "DELETE FROM " CVE_TABLE " WHERE PACKAGE = ?;",
    [VU_GET_MULTIPLE_CVE_ENTRIES] = "SELECT OPERATION, OPERATION_VALUE FROM VULNERABILITIES WHERE TARGET = ? \
                                AND CVEID = ? AND PACKAGE = ? AND OPERATION_VALUE != ? AND OPERATION != 'equals';",
    [VU_GET_MULTIPLE_CVE_ENTRIES_UBUNTU] = "SELECT OPERATION, OPERATION_VALUE FROM VULNERABILITIES \
                                LEFT JOIN VARIABLES ON VARIABLES.VID = VULNERABILITIES.PACKAGE WHERE \
                                VULNERABILITIES.TARGET = ? AND CVEID = ? AND VARIABLES.VALUE = ? AND OPERATION_VALUE != ? AND OPERATION != 'equals';",
    [VU_JOIN_QUERY] = "SELECT CVEID, (CASE WHEN VALUE IS NOT NULL THEN VALUE ELSE PACKAGE_NAME END), SOURCE, VERSION, ARCH, OPERATION, OPERATION_VALUE, SRC_VERSION, VENDOR, REFERENCE, TYPE \
                 FROM VULNERABILITIES LEFT JOIN VARIABLES ON VARIABLES.VID = VULNERABILITIES.PACKAGE AND VARIABLES.TARGET = VULNERABILITIES.TARGET \
                                      INNER JOIN AGENTS ON PACKAGE_NAME = (CASE WHEN VALUE IS NOT NULL THEN VALUE ELSE PACKAGE END) \
                 WHERE IGNORE = 0 AND VULNERABILITIES.TARGET = ? AND AGENT_ID = ? \
                 ORDER BY CVEID, PACKAGE_NAME, VERSION, ARCH;",
    [VU_JOIN_RH_QUERY] = "SELECT DISTINCT CVEID, PACKAGE_NAME, SOURCE, VERSION, ARCH, OPERATION, OPERATION_VALUE, SRC_VERSION, VENDOR, REFERENCE, TYPE \
            FROM VULNERABILITIES LEFT JOIN ARCHITECTURES ON (ARCHITECTURES.ID = VULNERABILITIES.ARCH_ID AND ARCHITECTURES.TARGET = VULNERABILITIES.TARGET) \
            INNER JOIN AGENTS ON (AGENTS.ARCH = 'noarch' OR VULNERABILITIES.ARCH_ID = 0 OR AGENTS.ARCH = ARCHITECTURES.ARCHITECTURE) AND PACKAGE = PACKAGE_NAME WHERE IGNORE = 0 \
            AND (VULNERABILITIES.TARGET = TARGET_MAJOR OR VULNERABILITIES.TARGET IS NULL OR (TARGET_MAJOR IS NULL AND VULNERABILITIES.TARGET = ?)) \
            AND AGENT_ID = ? ORDER BY CVEID, PACKAGE_NAME, VERSION, ARCH;",
    [VU_JOIN_DEBIAN_QUERY] = "SELECT CVEID, PACKAGE_NAME, SOURCE, VERSION, ARCH, OPERATION, OPERATION_VALUE, SRC_VERSION, VENDOR, REFERENCE, TYPE \
                 FROM VULNERABILITIES INNER JOIN AGENTS ON PACKAGE = (CASE WHEN SOURCE IS NOT NULL THEN SOURCE ELSE PACKAGE_NAME END) \
                 WHERE IGNORE = 0 AND VULNERABILITIES.TARGET = ? AND AGENT_ID = ? \
                 ORDER BY CVEID, PACKAGE_NAME, VERSION, ARCH;",
    [VU_JOIN_ARCH_QUERY] = "SELECT CVEID, PACKAGE_NAME, SOURCE, VERSION, ARCH, OPERATION, OPERATION_VALUE, SRC_VERSION, VENDOR, REFERENCE, TYPE \
                 FROM VULNERABILITIES INNER JOIN AGENTS ON PACKAGE = PACKAGE_NAME \
                 WHERE IGNORE = 0 AND VULNERABILITIES.TARGET = ? AND AGENT_ID = ? \
                 ORDER BY CVEID, PACKAGE_NAME, VERSION, ARCH;",
    [VU_JOIN_SUSE_QUERY] = "SELECT DISTINCT CVEID, PACKAGE_NAME, SOURCE, VERSION, ARCH, VULNERABILITIES.OPERATION, VULNERABILITIES.OPERATION_VALUE, SRC_VERSION, VENDOR, REFERENCE, TYPE \
                FROM VULNERABILITIES LEFT JOIN ARCHITECTURES ON (ARCHITECTURES.ID = VULNERABILITIES.ARCH_ID AND ARCHITECTURES.TARGET = VULNERABILITIES.TARGET) \
                LEFT JOIN PKG_DEPS ON (VULNERABILITIES.DEPS_ID = PKG_DEPS.PKG_ID) \
                INNER JOIN DEPENDENCIES ON (PKG_DEPS.DEP_ID = DEPENDENCIES.ID AND DEPENDENCIES.INSTALLED = 1) \
                INNER JOIN AGENTS ON (AGENTS.ARCH = 'noarch' OR VULNERABILITIES.ARCH_ID = 0 OR AGENTS.ARCH = ARCHITECTURES.ARCHITECTURE) AND PACKAGE = PACKAGE_NAME WHERE IGNORE = 0 \
                AND (VULNERABILITIES.TARGET = TARGET_MAJOR OR VULNERABILITIES.TARGET IS NULL OR (TARGET_MAJOR IS NULL AND VULNERABILITIES.TARGET = ?)) \
                AND AGENT_ID = ? ORDER BY CVEID, PACKAGE_NAME, VERSION, ARCH;",
    [VU_GET_SUSE_DEPS] = "SELECT AGENTS.VERSION, DEPENDENCIES.OPERATION_VALUE, AGENTS.PACKAGE_NAME, DEPENDENCIES.OPERATION \
                 FROM DEPENDENCIES INNER JOIN AGENTS ON (DEPENDENCIES.NAME = AGENTS.PACKAGE_NAME) WHERE AGENTS.AGENT_ID = ? AND DEPENDENCIES.TARGET = ?;",
    [VU_GET_VULN_COUNT] = "SELECT COUNT(*) FROM VULNERABILITIES WHERE CVEID = ? AND TARGET = ?;",
    [VU_GET_VULN_INFO] = "SELECT SEVERITY, PUBLISHED, UPDATED, RATIONALE, CVSS, CVSS3, CVSS_VECTOR, CVSS3_VECTOR, CWE FROM VULNERABILITIES_INFO WHERE ID = ? AND TARGET = ?;",
    [VU_REFS_QUERY] = "SELECT REFERENCE FROM " CVE_REF_TABLE " WHERE ID = ? AND TARGET = ?;",
    [VU_BUG_REFS_QUERY] = "SELECT BUGZILLA_REFERENCE FROM " CVE_BUG_REF_TABLE " WHERE ID = ? AND TARGET = ?;",
    [VU_ADVISORY_QUERY] = "SELECT ADVISORY FROM " CVE_ADVISORY_TABLE " WHERE ID = ? AND TARGET = ?;",
    [VU_REMOVE_OS] = "DELETE FROM %s WHERE TARGET = ?;",
    [VU_REMOVE_AGENTS_TABLE] = "DELETE FROM " AGENTS_TABLE ";",
    [VU_REMOVE_HOTFIXES_TABLE] = "DELETE FROM AGENT_HOTFIXES;",
    [VU_REMOVE_UNUSED_VULS] = "DELETE FROM " CVE_TABLE " WHERE PACKAGE LIKE '%:tst:%';",
    [VU_REMOVE_UNUSED_STATES] = "DELETE FROM " CVE_TABLE " WHERE OPERATION LIKE '%:ste:%';",
    // WAZUH DB REQUESTS
    [VU_HOTFIXES_GET] = "agent %d hotfix get",
    [VU_PACKAGES_GET] = "agent %d package get %s",
    [VU_SYSC_UPDATE_CPE] = "agent %s sql UPDATE SYS_PROGRAMS SET CPE = '%s:%s:%s:%s:%s:%s:%s:%s:%s:%s:%s', MSU_NAME = %Q WHERE VENDOR = %Q AND NAME = %Q AND VERSION = '%s' AND ARCHITECTURE = '%s';",
    [VU_SYSC_CLEAN_CPES] = "agent %s sql UPDATE SYS_PROGRAMS SET CPE = NULL, MSU_NAME = NULL;",
    [VU_GET_LAST_SCAN] = "agent %d sql SELECT LAST_PARTIAL_SCAN, LAST_FULL_SCAN FROM VULN_METADATA;",
    [VU_SET_LAST_FULL_SCAN] = "agent %d sql UPDATE VULN_METADATA SET LAST_FULL_SCAN='%u';",
    [VU_SET_LAST_PARTIAL_SCAN] = "agent %d sql UPDATE VULN_METADATA SET LAST_PARTIAL_SCAN='%u';",
    // CPE INDEX
    [VU_INSERT_CPE] = "INSERT INTO CPE_INDEX VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?);",
    [VU_REMOVE_AGENT_CPE] = "DELETE FROM CPE_INDEX WHERE ID < 0;",
    [VU_SEARCH_AGENT_CPE] = "SELECT DISTINCT PART FROM CPE_INDEX WHERE PART = 'a' AND VENDOR = ? AND PRODUCT = ?;",
    [VU_MIN_CPEINDEX] = "SELECT MIN(ID) FROM CPE_INDEX;",
    [VU_GET_PACK_WITHOUT_CPE] = "SELECT VENDOR, PACKAGE_NAME, VERSION, ARCH FROM AGENTS WHERE AGENT_ID = ? AND CPE_INDEX_ID = 0;",
    [VU_GET_AGENT_CPES] = "SELECT PART, CPE_INDEX.VENDOR, PRODUCT, CPE_INDEX.VERSION, UPDATEV, EDITION, LANGUAGE, SW_EDITION, TARGET_SW, TARGET_HW, OTHER, MSU_NAME, AGENTS.VENDOR, PACKAGE_NAME, AGENTS.VERSION, ARCH FROM AGENTS JOIN CPE_INDEX ON CPE_INDEX_ID = ID WHERE AGENT_ID = ?;",
    [VU_UPDATE_AGENT_CPE] = "UPDATE AGENTS SET CPE_INDEX_ID = ? WHERE AGENT_ID = ? AND VENDOR IS ? AND PACKAGE_NAME = ? AND VERSION = ? AND ARCH = ?;",
    // NVD
    [VU_GET_NVD_COUNT] = "SELECT COUNT(*) FROM NVD_CVE;",
    [VU_GET_NVD_CONFIGURED_YEAR] = "SELECT MIN(YEAR) FROM NVD_METADATA;",
    [VU_GET_NVD_TIMESTAMP] = "SELECT TIMESTAMP FROM NVD_METADATA WHERE YEAR = ?;",
    [VU_REP_NVD_METADATA] = "REPLACE INTO NVD_METADATA VALUES(?,?,?,?,?,?,?,?,strftime('%s', 'now'));",
    [VU_INSERT_NVD_CVE] = "INSERT INTO NVD_CVE VALUES(NULL,?,?,?,?,?,?,?,?);",
    [VU_GET_MAX_NVD_CVE_ID] = "SELECT MAX(ID) FROM NVD_CVE;",
    [VU_INSERT_NVD_METRIC_CVSS] = "INSERT INTO NVD_METRIC_CVSS VALUES(NULL,?,?,?,?,?,?);",
    [VU_INSERT_NVD_REFERENCE] = "INSERT INTO NVD_REFERENCE VALUES(NULL,?,?,?);",
    [VU_INSERT_NVD_CVE_CONFIGURATION] = "INSERT INTO NVD_CVE_CONFIGURATION VALUES(NULL,?,?,?);",
    [VU_GET_MAX_CONFIGURATION_ID] = "SELECT MAX(ID) FROM NVD_CVE_CONFIGURATION;",
    [VU_INSERT_NVD_CVE_MATCHES] = "INSERT INTO NVD_CVE_MATCH VALUES(NULL,?,?,?,?,?,?,?,?);",
    [VU_INSERT_NVD_CPE] = "INSERT INTO NVD_CPE VALUES(?,?,?,?,?,?,?,?,?,?,?,?);",
    [VU_GET_AN_CPE_ID] = "SELECT ID FROM NVD_CPE WHERE PART = ? AND VENDOR = ? AND PRODUCT = ? AND VERSION = ? AND UPDATED = ? AND EDITION = ? AND LANGUAGE = ? AND SW_EDITION = ? AND TARGET_SW = ? AND TARGET_HW = ? AND OTHER = ?;",
    [VU_GET_MAX_NVD_CPE_ID] = "SELECT MAX(ID) FROM NVD_CPE;",
    [VU_GET_OFFLINE_UPDATE] = "SELECT * FROM NVD_METADATA WHERE ALTERNATIVE = 1;",
    [VU_GET_NVD_LAST_UPDATE] = "SELECT MAX(LAST_UPDATE) FROM NVD_METADATA;",
    // NVD CLEAN
    [VU_REMOVE_NVD_METADATA] = "DELETE FROM NVD_METADATA WHERE YEAR = ?;",
    [VU_GET_NVD_CVE_YEAR] = "SELECT ID FROM NVD_CVE WHERE NVD_METADATA_YEAR = ?;",
    [VU_REMOVE_CVE_TABLE_REFS] = "DELETE FROM NVD_METRIC_CVSS WHERE NVD_CVE_ID = ?; DELETE FROM NVD_REFERENCE WHERE NVD_CVE_ID = ?; DELETE FROM NVD_CVE_CONFIGURATION WHERE NVD_CVE_ID = ?;",
    [VU_REMOVE_CVE_MATCHES] = "DELETE FROM NVD_CVE_MATCH WHERE NVD_CVE_CONFIGURATION_ID = ?;",
    [VU_REMOVE_NVD_CPE] = "DELETE FROM NVD_CPE WHERE ID NOT IN (SELECT DISTINCT ID_CPE FROM NVD_CVE_MATCH);",
    [VU_REMOVE_NVD_CVE] = "DELETE FROM NVD_CVE WHERE NVD_METADATA_YEAR = ?;",
    [VU_GET_NVD_CONFIG] = "SELECT ID FROM NVD_CVE_CONFIGURATION WHERE NVD_CVE_ID = ?;",
    // NVD REPORT
    [VU_GET_CVE_INFO] = "SELECT CVE_ID, CWE_ID, ASSIGNER, DESCRIPTION, VERSION, PUBLISHED, LAST_MODIFIED FROM NVD_CVE WHERE ID = ?;",
    [VU_GET_CVE_INFO_FILTER_CVE] = "SELECT ID, CWE_ID, ASSIGNER, DESCRIPTION, VERSION, PUBLISHED, LAST_MODIFIED FROM NVD_CVE WHERE CVE_ID = ?;",
    [VU_GET_CVE] = "SELECT CVE_ID FROM NVD_CVE WHERE ID = ?;",
    [VU_GET_REFERENCE] = "SELECT URL, REF_SOURCE FROM NVD_REFERENCE WHERE NVD_CVE_ID = ?;",
    [VU_GET_SCORING] = "SELECT VECTOR_STRING, BASE_SCORE, EXPLOITABILITY_SCORE, IMPACT_SCORE, VERSION FROM NVD_METRIC_CVSS WHERE NVD_CVE_ID = ?;",
    // NVD VULNERABILITY CHECK
    [VU_GET_DICT_CPE] = "SELECT CPE_INDEX.PART, CPE_INDEX.VENDOR, CPE_INDEX.PRODUCT, CPE_INDEX.VERSION, CPE_INDEX.UPDATEV, CPE_INDEX.EDITION, CPE_INDEX.LANGUAGE, CPE_INDEX.SW_EDITION, CPE_INDEX.TARGET_SW, CPE_INDEX.TARGET_HW, CPE_INDEX.MSU_NAME, AGENTS.PACKAGE_NAME, AGENTS.VERSION, AGENTS.ARCH, AGENTS.REFERENCE, AGENTS.TYPE FROM AGENTS INNER JOIN CPE_INDEX ON AGENTS.AGENT_ID = ? AND AGENTS.CPE_INDEX_ID < 0 AND CPE_INDEX.ID = AGENTS.CPE_INDEX_ID;",
    [VU_GET_NVD_CPE] = "SELECT NVD_CPE.ID, NVD_CPE.VERSION FROM NVD_CPE WHERE NVD_CPE.PART = ? AND NVD_CPE.VENDOR = ? AND NVD_CPE.PRODUCT = ? AND (NVD_CPE.VERSION = ? OR NVD_CPE.VERSION = '*' OR NVD_CPE.VERSION = '-') AND (NVD_CPE.UPDATED = '*' OR NVD_CPE.UPDATED = ?) AND (NVD_CPE.EDITION = '*' OR NVD_CPE.EDITION = ? OR NVD_CPE.EDITION = '') AND (NVD_CPE.LANGUAGE = '*' OR NVD_CPE.LANGUAGE = ? OR NVD_CPE.LANGUAGE = '') AND (NVD_CPE.SW_EDITION = '*' OR NVD_CPE.SW_EDITION = ? OR NVD_CPE.SW_EDITION = '') AND (NVD_CPE.TARGET_SW = '*' OR NVD_CPE.TARGET_SW = '-' OR NVD_CPE.TARGET_SW = '') AND (NVD_CPE.TARGET_HW = '*' OR NVD_CPE.TARGET_HW = '-' OR NVD_CPE.TARGET_HW = ?);",
    [VU_GET_NVD_MATCHES] = "SELECT NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.URI, NVD_CVE_MATCH.VULNERABLE, NVD_CVE_MATCH.VERSION_START_INCLUDING, NVD_CVE_MATCH.VERSION_START_EXCLUDING, NVD_CVE_MATCH.VERSION_END_INCLUDING, NVD_CVE_MATCH.VERSION_END_EXCLUDING FROM NVD_CVE_MATCH WHERE NVD_CVE_MATCH.ID_CPE = ?;",
    [VU_GET_CONF] = "SELECT NVD_CVE_CONFIGURATION.NVD_CVE_ID, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CVE_CONFIGURATION.PARENT FROM NVD_CVE_CONFIGURATION WHERE NVD_CVE_CONFIGURATION.ID = ?;",
    [VU_GET_CONF_AND] = "SELECT ID FROM NVD_CVE_CONFIGURATION WHERE PARENT=(SELECT ID FROM NVD_CVE_CONFIGURATION WHERE ID=? AND OPERATOR='AND') AND ID!=?;",
    [VU_GET_MATCHES_AND] = "SELECT ID FROM NVD_CVE_MATCH WHERE NVD_CVE_CONFIGURATION_ID = ?;",
    [VU_GET_CPE_AND] = "SELECT VENDOR, PRODUCT FROM NVD_CPE WHERE ID = ?;",
    [VU_GET_AGENTCPE_AND] = "SELECT CPEI.ID INNER JOIN CPE_INDEX CPEI ON CPEI.VENDOR=? AND CPEI.PRODUCT=? AND CPEI.ID<0 INNER JOIN AGENTS AG ON AG.CPE_INDEX_ID = CPEI.ID AND AG.AGENT_ID=?;",
    [VU_GET_GENERIC_PACKAGE_APP] = "SELECT NVD_CVE.CVE_ID, NVD_CVE_MATCH.VERSION_START_INCLUDING, NVD_CVE_MATCH.VERSION_START_EXCLUDING, NVD_CVE_MATCH.VERSION_END_INCLUDING, NVD_CVE_MATCH.VERSION_END_EXCLUDING, NVD_CVE_MATCH.ID, NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.VULNERABLE, \
                 NVD_CVE_CONFIGURATION.PARENT, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CPE.VENDOR, NVD_CPE.TARGET_SW \
                 FROM NVD_CPE INNER JOIN NVD_CVE_MATCH ON NVD_CPE.ID = NVD_CVE_MATCH.ID_CPE \
                              INNER JOIN NVD_CVE_CONFIGURATION ON  NVD_CVE_CONFIGURATION.ID = NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID \
                              INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.NVD_CVE_ID = NVD_CVE.ID \
                 WHERE NVD_CPE.PART = 'a' AND NVD_CPE.PRODUCT = ? AND (NVD_CPE.VERSION = '*' OR NVD_CPE.VERSION = '-');",
    [VU_GET_GENERIC_PACKAGE_OS] = "SELECT NVD_CVE.CVE_ID, NVD_CVE_MATCH.VERSION_START_INCLUDING, NVD_CVE_MATCH.VERSION_START_EXCLUDING, NVD_CVE_MATCH.VERSION_END_INCLUDING, NVD_CVE_MATCH.VERSION_END_EXCLUDING, NVD_CVE_MATCH.ID, NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.VULNERABLE, \
                 NVD_CVE_CONFIGURATION.PARENT, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CPE.VENDOR, NVD_CPE.TARGET_SW \
                 FROM NVD_CPE INNER JOIN NVD_CVE_MATCH ON NVD_CPE.ID = NVD_CVE_MATCH.ID_CPE \
                              INNER JOIN NVD_CVE_CONFIGURATION ON  NVD_CVE_CONFIGURATION.ID = NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID \
                              INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.NVD_CVE_ID = NVD_CVE.ID \
                 WHERE NVD_CPE.PART = 'o' AND (NVD_CPE.PRODUCT = ? OR NVD_CPE.PRODUCT = 'linux') AND (NVD_CPE.VERSION = '*' OR NVD_CPE.VERSION = '-') AND NVD_CPE.VENDOR = ?;",
    [VU_GET_SPECIFIC_PACKAGE_APP] = "SELECT NVD_CVE.CVE_ID, NVD_CPE.VERSION, NVD_CVE_MATCH.ID, NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.VULNERABLE, NVD_CVE_CONFIGURATION.PARENT, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CPE.VENDOR, NVD_CPE.TARGET_SW \
                 FROM NVD_CPE INNER JOIN NVD_CVE_MATCH ON NVD_CPE.ID = NVD_CVE_MATCH.ID_CPE \
                              INNER JOIN NVD_CVE_CONFIGURATION ON  NVD_CVE_CONFIGURATION.ID = NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID \
                              INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.NVD_CVE_ID = NVD_CVE.ID \
                 WHERE NVD_CPE.PART = 'a' AND NVD_CPE.PRODUCT = ? AND NVD_CPE.VERSION LIKE ? ;",
    [VU_GET_SPECIFIC_PACKAGE_OS] = "SELECT NVD_CVE.CVE_ID, NVD_CPE.VERSION, NVD_CVE_MATCH.ID, NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.VULNERABLE, NVD_CVE_CONFIGURATION.PARENT, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CPE.VENDOR, NVD_CPE.TARGET_SW \
                 FROM NVD_CPE INNER JOIN NVD_CVE_MATCH ON NVD_CPE.ID = NVD_CVE_MATCH.ID_CPE \
                              INNER JOIN NVD_CVE_CONFIGURATION ON  NVD_CVE_CONFIGURATION.ID = NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID \
                              INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.NVD_CVE_ID = NVD_CVE.ID \
                 WHERE NVD_CPE.PART = 'o' AND (NVD_CPE.PRODUCT = ? OR NVD_CPE.PRODUCT = 'linux') AND NVD_CPE.VERSION LIKE ? AND NVD_CPE.VENDOR = ?;",
    [VU_GET_CHILDREN] = "SELECT ID FROM NVD_CVE_MATCH WHERE NVD_CVE_CONFIGURATION_ID = ? AND ID != ?;",
    [VU_GET_SIBLINGS] = "SELECT ID FROM NVD_CVE_CONFIGURATION WHERE PARENT = ? AND ID != ?;",
    [VU_GET_NVD_CVE_COUNT] = "SELECT COUNT(*) FROM NVD_CVE WHERE NVD_CVE.CVE_ID = ?",
    [VU_GET_NVD_MATCHES_COUNT] = "SELECT COUNT(*) \
                 FROM NVD_CPE INNER JOIN NVD_CVE_MATCH ON NVD_CPE.ID = NVD_CVE_MATCH.ID_CPE \
                              INNER JOIN NVD_CVE_CONFIGURATION ON NVD_CVE_CONFIGURATION.ID = NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID \
                              INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.NVD_CVE_ID = NVD_CVE.ID \
                              WHERE ((NVD_CPE.VERSION = '*' OR NVD_CPE.VERSION = '-') \
                                     AND NVD_CVE_MATCH.VERSION_START_INCLUDING IS NULL \
                                     AND NVD_CVE_MATCH.VERSION_START_EXCLUDING IS NULL \
                                     AND NVD_CVE_MATCH.VERSION_END_INCLUDING IS NULL \
                                     AND NVD_CVE_MATCH.VERSION_END_EXCLUDING IS NULL) \
                                    AND NVD_CVE.CVE_ID = ? AND (NVD_CPE.PRODUCT = ? OR NVD_CPE.PRODUCT = ?)",
    [VU_GET_GENERIC_PACKAGE_OS_MAC] = "SELECT NVD_CVE.CVE_ID, NVD_CVE_MATCH.VERSION_START_INCLUDING, NVD_CVE_MATCH.VERSION_START_EXCLUDING, NVD_CVE_MATCH.VERSION_END_INCLUDING, NVD_CVE_MATCH.VERSION_END_EXCLUDING, NVD_CVE_MATCH.ID, NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.VULNERABLE, \
                 NVD_CVE_CONFIGURATION.PARENT, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CPE.VENDOR, NVD_CPE.TARGET_SW \
                 FROM NVD_CPE INNER JOIN NVD_CVE_MATCH ON NVD_CPE.ID = NVD_CVE_MATCH.ID_CPE \
                              INNER JOIN NVD_CVE_CONFIGURATION ON  NVD_CVE_CONFIGURATION.ID = NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID \
                              INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.NVD_CVE_ID = NVD_CVE.ID \
                 WHERE NVD_CPE.PART = 'o' AND NVD_CPE.PRODUCT = ? AND (NVD_CPE.VERSION = '*' OR NVD_CPE.VERSION = '-') AND NVD_CPE.VENDOR = 'apple';",
    [VU_GET_SPECIFIC_PACKAGE_OS_MAC] = "SELECT NVD_CVE.CVE_ID, NVD_CPE.VERSION, NVD_CVE_MATCH.ID, NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.VULNERABLE, NVD_CVE_CONFIGURATION.PARENT, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CPE.VENDOR, NVD_CPE.TARGET_SW \
                 FROM NVD_CPE INNER JOIN NVD_CVE_MATCH ON NVD_CPE.ID = NVD_CVE_MATCH.ID_CPE \
                              INNER JOIN NVD_CVE_CONFIGURATION ON  NVD_CVE_CONFIGURATION.ID = NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID \
                              INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.NVD_CVE_ID = NVD_CVE.ID \
                 WHERE NVD_CPE.PART = 'o' AND NVD_CPE.PRODUCT = ? AND NVD_CPE.VERSION LIKE ? AND NVD_CPE.VENDOR = 'apple';",
    [VU_GET_GENERIC_PACKAGE_APP_MAC] = "SELECT NVD_CVE.CVE_ID, NVD_CVE_MATCH.VERSION_START_INCLUDING, NVD_CVE_MATCH.VERSION_START_EXCLUDING, NVD_CVE_MATCH.VERSION_END_INCLUDING, NVD_CVE_MATCH.VERSION_END_EXCLUDING, NVD_CVE_MATCH.ID, NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.VULNERABLE, \
                 NVD_CVE_CONFIGURATION.PARENT, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CPE.VENDOR, NVD_CPE.TARGET_SW \
                 FROM NVD_CPE INNER JOIN NVD_CVE_MATCH ON NVD_CPE.ID = NVD_CVE_MATCH.ID_CPE \
                              INNER JOIN NVD_CVE_CONFIGURATION ON  NVD_CVE_CONFIGURATION.ID = NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID \
                              INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.NVD_CVE_ID = NVD_CVE.ID \
                 WHERE NVD_CPE.PART = 'a' AND NVD_CPE.PRODUCT = ? AND (NVD_CPE.VERSION = '*' OR NVD_CPE.VERSION = '-') AND (case when ? is not '' then vendor = ? else vendor is not null end);",
    [VU_GET_SPECIFIC_PACKAGE_APP_MAC] = "SELECT NVD_CVE.CVE_ID, NVD_CPE.VERSION, NVD_CVE_MATCH.ID, NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID, NVD_CVE_MATCH.VULNERABLE, NVD_CVE_CONFIGURATION.PARENT, NVD_CVE_CONFIGURATION.OPERATOR, NVD_CPE.VENDOR, NVD_CPE.TARGET_SW \
                 FROM NVD_CPE INNER JOIN NVD_CVE_MATCH ON NVD_CPE.ID = NVD_CVE_MATCH.ID_CPE \
                              INNER JOIN NVD_CVE_CONFIGURATION ON  NVD_CVE_CONFIGURATION.ID = NVD_CVE_MATCH.NVD_CVE_CONFIGURATION_ID \
                              INNER JOIN NVD_CVE ON NVD_CVE_CONFIGURATION.NVD_CVE_ID = NVD_CVE.ID \
                 WHERE NVD_CPE.PART = 'a' AND NVD_CPE.PRODUCT = ? AND NVD_CPE.VERSION LIKE ? AND (case when ? is not '' then vendor = ? else vendor is not null end);",
    // SQL OPERATIONS
    [VU_REMOVE_SQUENCE] = "DELETE FROM SQLITE_SEQUENCE WHERE NAME = ?;",
    // WAZUH CPE DICTIONARY
    [VU_REMOVE_CPE_DIC] = "DELETE FROM CPE_HELPER; DELETE FROM CPE_HELPER_SOURCE; DELETE FROM CPE_HELPER_TRANSLATION;",
    [VU_INSERT_CPE_HELPER] = "INSERT INTO CPE_HELPER VALUES(?,?,?);",
    [VU_INSERT_CPE_SOURCE] = "INSERT INTO CPE_HELPER_SOURCE VALUES(?,?,?,?);",
    [VU_INSERT_CPE_TRANSLATION] = "INSERT INTO CPE_HELPER_TRANSLATION VALUES(?,?,?,?,?,?);",
    [VU_GET_DIC_MATCHES] = "SELECT DISTINCT VENDOR, PACKAGE_NAME, VERSION, ARCH, ID, ACTION FROM AGENTS INNER JOIN CPE_HELPER_SOURCE T1 ON AGENT_ID = ? AND T1.TYPE = 'vendor' AND (VENDOR REGEXP T1.TERM OR (T1.TERM IS NULL AND VENDOR IS NULL)) INNER JOIN CPE_HELPER ON ID = T1.ID_HELPER INNER JOIN CPE_HELPER_SOURCE T2 ON ID = T2.ID_HELPER AND T2.TYPE = 'product' AND PACKAGE_NAME REGEXP T2.TERM;",
    [VU_GET_EXACT_TERM] = "SELECT TERM, CORRELATION_ID FROM CPE_HELPER_SOURCE WHERE ID_HELPER = ? AND TYPE = ? AND CASE WHEN ? = '' THEN TERM ELSE ? END REGEXP TERM ORDER BY CORRELATION_ID;",
    [VU_GET_TRANSLATION_TERM] = "SELECT TERM, COMPARE_FIELD, CONDITION FROM CPE_HELPER_TRANSLATION WHERE ID_HELPER = ? AND TYPE = ? AND CORRELATION_ID = ?;",
    // MSU
    [VU_REMOVE_MSU] = "DELETE FROM MSU;",
    [VU_REMOVE_MSU_SUP] = "DELETE FROM MSU_SUPERSEDENCE;",
    [VU_INSERT_MSU] = "INSERT INTO MSU VALUES(?,?,?,?,?,?,?,?);",
    [VU_INSERT_MSU_SUPER] = "INSERT or IGNORE INTO MSU_SUPERSEDENCE VALUES(?,?), (?,?);",
    [VU_SIZE_MSU] =  "SELECT COUNT(*) FROM MSU;",
    [VU_HOTFX_SIMPLE] = "SELECT DISTINCT M1.PATCH, SUPER, SUBTYPE FROM MSU M1 INNER JOIN MSU_SUPERSEDENCE ON MSU_SUPERSEDENCE.PATCH = M1.PATCH WHERE M1.CVEID = ? AND M1.PRODUCT REGEXP ?%s;",
    [VU_HOTFX_WITHOUT_R2] = "SELECT DISTINCT M1.PATCH, SUPER, SUBTYPE FROM MSU M1 INNER JOIN MSU_SUPERSEDENCE ON MSU_SUPERSEDENCE.PATCH = M1.PATCH WHERE M1.CVEID = ? AND M1.PRODUCT REGEXP ? AND M1.PRODUCT NOT LIKE '% R2%%'%s;",
    [VU_CHECK_AGENT_HOTFIX] = "SELECT HOTFIX FROM AGENT_HOTFIXES WHERE AGENT_ID = ? AND HOTFIX LIKE ?;",
    //ARCHITECTURE
    [VU_GET_ARCH_ID] = "SELECT ARCH_ID FROM "CVE_TABLE" WHERE CVEID = ? AND TARGET = ? AND PACKAGE = ? AND OPERATION_VALUE = ?;",
    // TRANSACTIONS
    [BEGIN_T] = "BEGIN TRANSACTION;",
    [END_T] = "END TRANSACTION;"};

extern char *schema_vuln_detector_sql;

#endif
