# Copyright (C) 2015, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GP

import json
from datetime import datetime

from wazuh.core import common
from wazuh.core.agent import Agent
from wazuh.core.utils import WazuhDBQuery, WazuhDBBackend, WazuhDBQueryGroupBy, get_date_from_timestamp


class WazuhDBQueryVulnerability(WazuhDBQuery):
    """"""
    fields = {
        'name': 'name', 'version': 'version', 'architecture': 'architecture', 'cve': 'cve', 'status': 'status',
        'type': 'type', 'detection_time': 'detection_time', 'severity': 'severity', 'cvss2_score': 'cvss2_score',
        'cvss3_score': 'cvss3_score', 'external_references': 'external_references', 'condition': 'condition',
        'title': 'title', 'published': 'published', 'updated': 'updated'
    }

    def __init__(self, agent_id, offset=0, limit=common.DATABASE_LIMIT, sort=None, search=None, select=None, query='',
                 count=True, get_data=True, distinct=False, default_sort_field='name', filters=None, fields=None,
                 table='vuln_cves'):
        if fields is None:
            fields = WazuhDBQueryVulnerability.fields
        if filters is None:
            filters = {}
        # Check if the agent exists
        Agent(agent_id).get_basic_information()
        backend = WazuhDBBackend(agent_id)
        WazuhDBQuery.__init__(self, offset=offset, limit=limit, table=table, sort=sort, search=search,
                              select=select, fields=fields, default_sort_field=default_sort_field,
                              default_sort_order='ASC', filters=filters, query=query, backend=backend,
                              min_select_fields=set(), count=count, get_data=get_data, distinct=distinct,
                              date_fields={'detection_time', 'last_partial_scan', 'last_full_scan'})

    def _format_data_into_dictionary(self):
        def format_fields(field_name, value):
            if field_name in self.date_fields:
                try:
                    return get_date_from_timestamp(int(value))
                except (ValueError, TypeError):
                    pass

            elif field_name == 'external_references':
                return json.loads(value)

            return value

        self._data = [{key: format_fields(key, value) for key, value in item.items()} for item in self._data]

        return super()._format_data_into_dictionary()


class WazuhDBQueryGroupByVulnerability(WazuhDBQueryGroupBy, WazuhDBQueryVulnerability):
    """Class to obtain CVEs summary information."""

    def __init__(self, filter_fields, *args, **kwargs):
        WazuhDBQueryVulnerability.__init__(self, *args, **kwargs)
        date_fields = self.date_fields
        del kwargs['agent_id']
        WazuhDBQueryGroupBy.__init__(self, *args, table=self.table, fields=self.fields, filter_fields=filter_fields,
                                     default_sort_field=self.default_sort_field, backend=self.backend, offset=0,
                                     search=None, query=None, count=True, get_data=True, date_fields=date_fields,
                                     **kwargs)
        self.remove_extra_fields = True

    def _format_data_into_dictionary(self):
        def format_fields(field_name, value):
            if field_name in self.date_fields:
                try:
                    # These values will be the keys of the result. They cannot be datetime objects
                    return str(get_date_from_timestamp(int(value)))
                except (ValueError, TypeError):
                    pass

            return value

        self._data = [{key: format_fields(key, value) for key, value in item.items()} for item in self._data]

        return super()._format_data_into_dictionary()
