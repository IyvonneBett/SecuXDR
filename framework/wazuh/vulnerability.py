# Copyright (C) 2015, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import json

from wazuh.core import common, exception
from wazuh.core.cluster.cluster import get_node
from wazuh.core.cluster.utils import read_cluster_config
from wazuh.core.results import AffectedItemsWazuhResult, WazuhResult
from wazuh.core.vulnerability import WazuhDBQueryVulnerability, WazuhDBQueryGroupByVulnerability
from wazuh.core.wazuh_socket import WazuhSocket
from wazuh.rbac.decorators import expose_resources

SCAN_ON_DEMAND_COMMAND = "query vulnerability-detector run_now"
SCAN_ON_DEMAND_EXCEPTION = 8000

cluster_enabled = not read_cluster_config(from_import=True)['disabled']
node_id = get_node().get('node') if cluster_enabled else 'manager'


@expose_resources(actions=["vulnerability:run"], resources=["*:*:*"])
def run_vulnerability_scan():
    """Run a vulnerability detector scan.

    Returns
    -------
    WazuhResult
        WazuhResult with the socket response.
    """
    result = AffectedItemsWazuhResult(all_msg="A vulnerability detector scan was requested"
                                              f"{' in all nodes' if node_id != 'manager' else ''}",
                                      some_msg="A vulnerability detector scan was requested"
                                               f"{' in some nodes' if node_id != 'manager' else ''}",
                                      none_msg="No vulnerability detector scans were requested",
                                      sort_casting=["str"])
    try:
        with WazuhSocket(common.WMODULES_SOCKET) as s:
            s.send(SCAN_ON_DEMAND_COMMAND.encode())
            rec_msg = s.receive().decode()
            status, response = rec_msg.split(" ", 1)
            msg = json.loads(response)
    except Exception as e:
        result.add_failed_item(node_id, exception.WazuhInternalError(1121, extra_message=str(e)))
        return result

    if status == "ok":
        result.affected_items.append(node_id)
    elif status == "err":
        result.add_failed_item(node_id, exception.WazuhInternalError(SCAN_ON_DEMAND_EXCEPTION + msg['error'],
                                                                     cmd_error=True,
                                                                     extra_message=msg['message']))
    else:  # Unexpected error from socket
        result.add_failed_item(node_id, exception.WazuhInternalError(8000, extra_message=msg))

    result.total_affected_items = len(result.affected_items)

    return result


@expose_resources(actions=["vulnerability:read"], resources=["agent:id:{agent_list}"], post_proc_func=None)
def get_agent_cve(agent_list: list = None, offset: int = 0, limit: int = common.DATABASE_LIMIT, sort: str = None,
                  search: str = None, select: list = None, q: str = '', distinct: bool = None,
                  filters: dict = None) -> AffectedItemsWazuhResult:
    """Get agents' vulnerabilities.

    Parameters
    ----------
    agent_list : list
        List of agents ID's.
    offset : int
        First item to return.
    limit : int
        Maximum number of items to return.
    sort : str
        Sort the collection by a field or fields (separated by comma). Use +/- at the beginning to list in
        ascending or descending order.
    search : str
        Look for elements with the specified string.
    select : list
        Fields to return.
    q : str
        Query to filter results by.
    distinct : bool
        Look for distinct values.
    filters : dict
        Fields to filter by.

    Returns
    -------
    AffectedItemsWazuhResult
        JSON containing the vulnerabilities.
    """
    result = AffectedItemsWazuhResult(all_msg='All selected vulnerabilities were returned',
                                      some_msg='Some vulnerabilities were not returned',
                                      none_msg='No vulnerabilities were returned'
                                      )

    with WazuhDBQueryVulnerability(agent_id=agent_list[0], offset=offset, limit=limit, sort=sort, search=search,
                                   select=select, query=q, filters=filters, count=True, get_data=True,
                                   distinct=distinct) as db_query:
        data = db_query.run()

    result.affected_items.extend(data['items'])
    result.total_affected_items = data['totalItems']

    return result


@expose_resources(actions=["vulnerability:read"], resources=["agent:id:{agent_list}"], post_proc_func=None)
def last_scan(agent_list: list = None) -> AffectedItemsWazuhResult:
    """Return when the last full and partial vulnerability scan of a specified agent ended.

    Parameters
    ----------
    agent_list : list
        List of agents ID's.

    Returns
    -------
    AffectedItemsWazuhResult
        Confirmation/Error message and scan dates.
    """
    result = AffectedItemsWazuhResult(all_msg='Last vulnerability scans of the agent were returned',
                                      none_msg='No last scan information was returned'
                                      )

    db_query = WazuhDBQueryVulnerability(agent_id=agent_list[0], table='vuln_metadata',
                                         default_sort_field='last_full_scan',
                                         fields={'last_partial_scan': 'LAST_PARTIAL_SCAN',
                                                 'last_full_scan': 'LAST_FULL_SCAN'})
    data = db_query.run()
    result.affected_items.extend(data['items'])
    result.total_affected_items = data['totalItems']

    return result


@expose_resources(actions=["vulnerability:read"], resources=["agent:id:{agent_list}"], post_proc_func=None)
def get_inventory_summary(agent_list: list = None, field: str = '', limit: int = common.DATABASE_LIMIT) -> WazuhResult:
    """Return a summary of the agent vulnerabilities' given field.

    Parameters
    ----------
    agent_list : list
        List with the agent ID.
    field : str
        Field to obtain the summary from.
    limit : int
        Maximum number of elements to return.

    Returns
    -------
    WazuhResult
        Result with the summary.
    """

    with WazuhDBQueryGroupByVulnerability(agent_id=agent_list[0], limit=limit, select=[field],
                                          sort={'fields': ['count'], 'order': 'desc'},
                                          filter_fields=[field]) as db_query:
        data = db_query.run()

    return WazuhResult({'data': {field: {item[field]: item['count'] for item in data['items']}}})
