# Copyright (C) 2015, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is a free software; you can redistribute it and/or modify it under the terms of GPLv2

import logging

from aiohttp import web

from api.encoder import dumps, prettify
from api.util import parse_api_param, remove_nones_to_dict, raise_if_exc
from wazuh import vulnerability, WazuhError
from wazuh.core.cluster.control import get_system_nodes
from wazuh.core.cluster.dapi.dapi import DistributedAPI
from wazuh.core.common import DATABASE_LIMIT

logger = logging.getLogger('wazuh-api')


async def run_vulnerability_scan(request, pretty: bool = False, wait_for_complete: bool = False) -> web.Response:
    """Run a vulnerability detector scan in all nodes.

    Parameters
    ----------
    request : connexion.request
    pretty : bool
        Show results in human-readable format.
    wait_for_complete : bool
        Disable timeout response.

    Returns
    -------
    web.Response
        API response.
    """
    try:
        nodes = await get_system_nodes()
        dapi_extra_kwargs = {'f_kwargs': {'node_list': nodes},
                             'nodes': nodes,
                             'remove_denied_nodes': True} \
            if not isinstance(nodes, WazuhError) else {}
    except Exception as exc:
        raise_if_exc(exc)

    dapi = DistributedAPI(f=vulnerability.run_vulnerability_scan,
                          request_type='distributed_master',
                          is_async=False,
                          wait_for_complete=wait_for_complete,
                          logger=logger,
                          rbac_permissions=request['token_info']['rbac_policies'],
                          **dapi_extra_kwargs)
    data = raise_if_exc(await dapi.distribute_function())

    return web.json_response(data=data, status=200, dumps=prettify if pretty else dumps)


async def get_vulnerability_agent(request, pretty: bool = False, wait_for_complete: bool = False, agent_id: str = None,
                                  offset: int = 0, limit: int = None, sort: str = None, search: str = None,
                                  select: str = None, q: str = '', distinct: str = None, architecture: str = None,
                                  cve: str = None, name: str = None, version: str = None, type: str = None,
                                  status: str = None, severity: str = None) -> web.Response:
    """Get agents' vulnerabilities.

    Parameters
    ----------
    request : request.connexion
    pretty : bool
        Show results in human-readable format.
    wait_for_complete : bool
        Disable timeout response.
    agent_id : str
        ID of the agent to retrieve CVE info.
    offset : int
        First element to return in the collection.
    limit : int
        Maximum number of elements to return.
    sort : str
        Sort the collection by a field or fields (separated by comma). Use +/- at the beginning to list in
        ascending or descending order.
    search : str
        Look for elements with the specified string.
    select : str
        Fields to return.
    q : str
        Query to filter results by.
    distinct : bool
        Look for distinct values.
    architecture : str
        Filter by architecture.
    cve : str
        Filter by CVE ID.
    name : str
        Filter by package ID.
    version : str
        Filter by version.
    type : str
        Filter by CVE type.
    status : str
        Filter by CVE status.
    severity : str
        Filter by CVE severity.

    Returns
    -------
    web.Response
        API response.
    """
    f_kwargs = {
        'agent_list': [agent_id],
        'offset': offset,
        'limit': limit,
        'sort': parse_api_param(sort, 'sort'),
        'search': parse_api_param(search, 'search'),
        'select': select,
        'q': q,
        'distinct': distinct,
        'filters': {
            'architecture': architecture,
            'cve': cve,
            'name': name,
            'version': version,
            'status': status,
            'type': type,
            'severity': severity
        }
    }

    dapi = DistributedAPI(f=vulnerability.get_agent_cve,
                          f_kwargs=remove_nones_to_dict(f_kwargs),
                          request_type='distributed_master',
                          is_async=False,
                          wait_for_complete=wait_for_complete,
                          logger=logger,
                          rbac_permissions=request['token_info']['rbac_policies']
                          )
    data = raise_if_exc(await dapi.distribute_function())

    return web.json_response(data=data, status=200, dumps=prettify if pretty else dumps)


async def get_last_scan_agent(request, pretty: bool = False, wait_for_complete: bool = False,
                              agent_id: str = None) -> web.Response:
    """Return when the last full and partial vulnerability scan of a specified agent ended.

    Parameters
    ----------
    pretty : bool
        Show results in human-readable format.
    wait_for_complete : bool
        Disable timeout response.
    agent_id : str
        ID of the agent to retrieve scans info.

    Returns
    -------
    web.Response
        API response.
    """
    f_kwargs = {'agent_list': [agent_id]}

    dapi = DistributedAPI(f=vulnerability.last_scan,
                          f_kwargs=remove_nones_to_dict(f_kwargs),
                          request_type='distributed_master',
                          is_async=False,
                          wait_for_complete=wait_for_complete,
                          logger=logger,
                          rbac_permissions=request['token_info']['rbac_policies']
                          )
    data = raise_if_exc(await dapi.distribute_function())

    return web.json_response(data=data, status=200, dumps=prettify if pretty else dumps)


async def get_vulnerabilities_field_summary(request, pretty: bool = False, wait_for_complete: bool = False,
                                            agent_id: str = None, field: str = None,
                                            limit: int = DATABASE_LIMIT) -> web.Response:
    """Return a summary of the vulnerabilities' field of a given agent.

    Parameters
    ----------
    pretty : bool
        Show results in human-readable format.
    wait_for_complete : bool
        Disable timeout response.
    agent_id : str
        ID of the agent to retrieve severity summary.
    field : str
        Field to obtain the summary from.
    limit : int
        Maximum number of elements to return. Default: DATABASE_LIMIT

    Returns
    -------
    web.Response
        API response.
    """
    f_kwargs = {'agent_list': [agent_id],
                'field': field,
                'limit': limit}

    dapi = DistributedAPI(f=vulnerability.get_inventory_summary,
                          f_kwargs=remove_nones_to_dict(f_kwargs),
                          request_type='distributed_master',
                          is_async=False,
                          wait_for_complete=wait_for_complete,
                          logger=logger,
                          rbac_permissions=request['token_info']['rbac_policies']
                          )
    data = raise_if_exc(await dapi.distribute_function())

    return web.json_response(data=data, status=200, dumps=prettify if pretty else dumps)
