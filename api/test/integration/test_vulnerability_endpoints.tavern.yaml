---
test_name: GET /vulnerability/{agent_id}

stages:

  # GET /vulnerability/001
  - name: Get agent's vulnerabilities (limit and offset)
    request: &vulnerability_request_001
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/vulnerability/001"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        offset: 5
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - cve: !anystr
              version: !anystr
              architecture: !anystr
              name: !anystr
              type: !anystr
              status: !anystr
              cvss2_score: !anything
              cvss3_score: !anything
              detection_time: !anystr
              severity: !anystr
              external_references: !anylist
              condition: !anystr
              title: !anystr
              published: !anystr
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0
      save:
        json:
          expected_cve: data.affected_items[0].cve
          expected_version: data.affected_items[0].version
          expected_architecture: data.affected_items[0].architecture
          expected_name: data.affected_items[0].name
          expected_type: data.affected_items[0].type
          expected_status: data.affected_items[0].status
          expected_cvss2_score: data.affected_items[0].cvss2_score
          expected_cvss3_score: data.affected_items[0].cvss3_score
          expected_detection_time: data.affected_items[0].detection_time
          expected_severity: data.affected_items[0].severity
          expected_external_references: data.affected_items[0].external_references
          expected_condition: data.affected_items[0].condition
          expected_title: data.affected_items[0].title
          expected_published: data.affected_items[0].published

  - name: Get agent's vulnerabilities (filter by Type)
    request:
      <<: *vulnerability_request_001
      params:
        type: "{expected_type}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "type"
            expected_values: "{expected_type}"

  - name: Get agent's vulnerabilities (filter by Status)
    request:
      <<: *vulnerability_request_001
      params:
        status: "{expected_status}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "status"
            expected_values: "{expected_status}"

  - name: Get agent's vulnerabilities (filter by CVE)
    request:
      <<: *vulnerability_request_001
      params:
        cve: "{expected_cve}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "cve"
            expected_values: "{expected_cve}"

  - name: Get agent's vulnerabilities (filter by version)
    request:
      <<: *vulnerability_request_001
      params:
        version: "{expected_version}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "version"
            expected_values: "{expected_version}"

  - name: Get agent's vulnerabilities (filter by architecture)
    request:
      <<: *vulnerability_request_001
      params:
        architecture: "{expected_architecture}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "architecture"
            expected_values: "{expected_architecture}"

  - name: Get agent's vulnerabilities (filter by name)
    request:
      <<: *vulnerability_request_001
      params:
        name: "{expected_name}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "name"
            expected_values: "{expected_name}"

  - name: Get agent's vulnerabilities (filter by severity)
    request:
      <<: *vulnerability_request_001
      params:
        severity: "{expected_severity}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "severity"
            expected_values: "{expected_severity}"

  - name: Get agent's vulnerabilities (filter by CVSS2 score)
    request:
      <<: *vulnerability_request_001
      params:
        q: "cvss2_score={expected_cvss2_score}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "cvss2_score"
            expected_values: "{expected_cvss2_score}"

  - name: Get agent's vulnerabilities (filter by CVSS3 score)
    request:
      <<: *vulnerability_request_001
      params:
        q: "cvss3_score={expected_cvss3_score}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "cvss3_score"
            expected_values: "{expected_cvss3_score}"

  - name: Get agent's vulnerabilities (filter by condition)
    request:
      <<: *vulnerability_request_001
      params:
        q: "condition={expected_condition}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "condition"
            expected_values: "{expected_condition}"

  - name: Get agent's vulnerabilities (filter by title)
    request:
      <<: *vulnerability_request_001
      params:
        q: "title={expected_title}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "title"
            expected_values: "{expected_title}"

  - name: Get agent's vulnerabilities (filter by publish date)
    request:
      <<: *vulnerability_request_001
      params:
        q: "published={expected_published}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "published"
            expected_values: "{expected_published}"

  - name: Try to get agent's vulnerabilities (filter by an unexistent CVSS3 score)
    request:
      <<: *vulnerability_request_001
      params:
        q: "cvss3_score>100"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: [ ]
          failed_items: [ ]
          total_affected_items: 0
          total_failed_items: 0

  - name: Sort agent's vulnerabilities (version)
    request:
      <<: *vulnerability_request_001
      params:
        sort: "-version"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "version"
            reverse: True

  - name: Sort agent's vulnerabilities (CVE)
    request:
      <<: *vulnerability_request_001
      params:
        sort: "+cve"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "cve"

  - name: Search agent's vulnerabilities
    request:
      <<: *vulnerability_request_001
      params:
        search: "{expected_cve}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "cve"
            expected_values: "{expected_cve}"

  - name: Search agent's vulnerabilities
    request:
      <<: *vulnerability_request_001
      params:
        search: "{expected_version}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "version"
            expected_values: "{expected_version}"

  - name: Select agent's vulnerabilities fields
    request:
      <<: *vulnerability_request_001
      params:
        select: "cve,name,external_references"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_select_key_affected_items
          extra_kwargs:
            select_key: "cve,name,external_references"

  - name: q agent's vulnerabilities
    request:
      <<: *vulnerability_request_001
      params:
        q: "name!={expected_name};architecture={expected_architecture}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_response_is_different
          extra_kwargs:
            response_value: data.affected_items[0].name
            unexpected_value: "{expected_name}"
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "architecture"
            expected_values: "{expected_architecture}"

  - name: Get distinct architecture vulnerabilities
    request:
      verify: False
      <<: *vulnerability_request_001
      params:
        distinct: true
        select: architecture
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

  - name: Get distinct version-name vulnerabilities
    request:
      verify: False
      <<: *vulnerability_request_001
      params:
        distinct: true
        select: version,name
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

  # GET /vulnerabilities/002
  - name: Get 002 agent's vulnerabilities (limit)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/vulnerability/002"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - cve: !anystr
              version: !anystr
              architecture: !anystr
              name: !anystr
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  # GET /vulnerabilities/012
  - name: Try to get 012 agent's vulnerabilities (never connected)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/vulnerability/012"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        error: 2007

---
test_name: GET /vulnerability/001/last_scan

stages:

  # GET /vulnerability/001/last_scan
  - name: Get when the last full and partial scans for agent 001 ended
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/vulnerability/001/last_scan"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - last_full_scan: !anything
              last_partial_scan: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0


---
test_name: GET /vulnerability/{agent_id}/summary/{field}

stages:

  # GET /vulnerability/001/summary/severity
  - name: Get a summary of the vulnerabilities' severity of a given agent
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/vulnerability/001/summary/severity"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          severity: !anything

  # GET /vulnerability/001/summary/name
  - name: Get a summary of the vulnerabilities' packages names of a given agent
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/vulnerability/001/summary/name"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          name: !anything

  # GET /vulnerability/999/summary/severity
  - name: Get a summary of the vulnerabilities' severity of a non existent agent
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/vulnerability/999/summary/severity"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 404
      json:
        error: 1701

  # GET /vulnerability/001/summary/whatever
  - name: Get a summary of a non-existent field in the CVE inventory
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/vulnerability/001/summary/whatever"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400

---
test_name: PUT /vulnerability

stages:

  # GET /agents/stats/distinct
  - name: Save name of nodes with at least one agent connected
    request:
      verify: False
      method: GET
      url: "{protocol:s}://{host:s}:{port:d}/agents/stats/distinct"
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        fields: node_name
    response:
      save:
        json:
          first_node_name: data.affected_items[0].node_name
          first_node_count: data.affected_items[0].count
          second_node_name: data.affected_items[1].node_name
          second_node_count: data.affected_items[1].count
          third_node_name: data.affected_items[2].node_name
          third_node_count: data.affected_items[2].count

  # PUT /vulnerability
  - name: Run vulnerability detector scans
    request:
      verify: False
      method: PUT
      url: "{protocol:s}://{host:s}:{port:d}/vulnerability"
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_validate_vd_scans
          extra_kwargs:
            first_node_name: "{first_node_name}"
            first_node_count: !int "{first_node_count}"
            second_node_name: "{second_node_name}"
            second_node_count: !int "{second_node_count}"
            third_node_name: "{third_node_name}"
            third_node_count: !int "{third_node_count}"
