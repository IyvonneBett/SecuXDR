import json
import socket
import sys
from os import path, system

sys.path.append('/tools')

from healthcheck_utils import BASE_URL, check, get_login_header, get_manager_health_base, get_response, LOGIN_URL

# Configuration
user = 'wazuh'
password = 'wazuh'
headers = get_login_header(user, password)
agents_to_check = ['001', '002']
HEALTHCHECK_STATE_FILE = '/tmp_volume/healthcheck/healthcheck.state'


# Functions
def get_agents_node(status='active'):
    """Get to which manager each agent reports.

    Parameters
    ----------
    status : str
        Status to filter agents by.

    Returns
    -------
    dict, None
        Dictionary like {agent_id: manager_name} if agents were obtained, else None.
    """
    try:
        headers['Authorization'] = f"Bearer {get_response('POST', LOGIN_URL, headers)['data']['token']}"
        response = get_response("GET", f"{BASE_URL}/agents?select=id,manager&status={status}",
                                headers)['data']['affected_items']
    except Exception:
        return

    return {item['id']: item['manager'] for item in response}


def get_healthcheck_state():
    with open(HEALTHCHECK_STATE_FILE, mode='r') as f:
        return json.loads(f.read())


def set_healthcheck_state(state):
    if state:
        with open(HEALTHCHECK_STATE_FILE, mode='w') as f:
            f.write(json.dumps(state, indent=4))


if __name__ == '__main__':
    # Get dict of agent IDs and the manager they report to.
    if not path.exists(HEALTHCHECK_STATE_FILE):
        agents_node = get_agents_node()
        # If not all requested agents were returned, exit with error code.
        # Otherwise, write state to file.
        if all(agent in agents_node.keys() for agent in agents_to_check):
            set_healthcheck_state(agents_node)
        else:
            exit(1)
    else:
        # Read state from file instead of api request.
        agents_node = get_healthcheck_state()

    # Create a checks list with the manager health base at first
    checks_list = [get_manager_health_base(env_mode=sys.argv[1] if len(sys.argv) > 1 else None)]

    expected_log = "grep -q 'wazuh-modulesd:vulnerability-detector: INFO: (5471): Finished vulnerability assessment " \
                   "for agent '\\''{}'\\''' /var/ossec/logs/ossec.log"

    for agent in agents_to_check:
        if agents_node[agent] == socket.gethostname():
            # Append only logs that are expected in the current node to the checks list
            checks_list.append(check(system(expected_log.format(agent))))

    nodes_to_check = list(dict.fromkeys(list(agents_node.values())))
    if socket.gethostname() in nodes_to_check:
        # Append the log showing the end of the scan to ensure the agents' database have the expected data
        checks_list.append(check(system("grep -q 'wazuh-modulesd:vulnerability-detector: INFO: (5472): "
                                        "Vulnerability scan finished.' /var/ossec/logs/ossec.log")))

    exit(any(checks_list))
